/*
$Header: /u1/project/ARSperl/ARSperl/RCS/support-h.template,v 1.2 1998/09/11 19:36:44 jcmurphy Exp $

    ARSperl - An ARS2.x-3.0 / Perl5.x Integration Kit

    Copyright (C) 1995,1996,1997 
	Joel Murphy, jmurphy@acsu.buffalo.edu
        Jeff Murphy, jcmurphy@acsu.buffalo.edu
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

    Comments to:  arsperl@smurfland.cit.buffalo.edu
                  (this is a *mailing list*)

    Bugs to: arsperl-bugs@smurfland.cit.buffalo.edu
 
    LOG:

$Log: support-h.template,v $
Revision 1.2  1998/09/11 19:36:44  jcmurphy
added perl_diary prototype

Revision 1.1  1998/08/07 18:38:23  jcmurphy
Initial revision

Revision 1.13  1998/08/07 16:21:27  jcmurphy
added ars3.2 def's to ServerInfoMap list

Revision 1.12  1998/05/19 13:10:26  jcmurphy
fixed strstr/substr typo

Revision 1.11  1998/03/31 23:32:06  jcmurphy
NT patch by  Bill Middleton <wjm@metronet.com>

Revision 1.1  1998/03/17 15:19:02  aawimi
Initial revision

Revision 1.9  1997/11/10 23:50:36  jcmurphy
1.5206: added refreshCode to GetCharMenu().
added ars_GetVUI to EXPORTS in .pm file
fixed bug in 1.5205's groupList alteration

Revision 1.8  1997/11/04 18:16:04  jcmurphy
1.5205: permissions list map

Revision 1.7  1997/10/20 21:00:41  jcmurphy
5203 beta. code cleanup. winnt additions. malloc/free
debugging code.

Revision 1.6  1997/10/09 15:21:33  jcmurphy
1.5201: code cleaning

Revision 1.5  1997/10/09 00:49:28  jcmurphy
1.52: uninit'd var bug fix

Revision 1.4  1997/10/07 14:29:38  jcmurphy
1.51

Revision 1.3  1997/10/02 15:39:53  jcmurphy
1.50beta

Revision 1.2  1997/09/04 00:20:47  jcmurphy
*** empty log message ***

Revision 1.1  1997/08/05 21:21:11  jcmurphy
Initial revision


*/

#ifndef __support_h_
#define __support_h_

#undef EXTERN
#ifndef __support_c_
# define EXTERN extern
#else
# define EXTERN 
#endif

#include "ar.h"
#include "arerrno.h"
#include "arextern.h"
#include "arstruct.h"
#include "arfree.h"

#include "nt.h"
#include "nterrno.h"
#include "ntfree.h"
#include "ntsextrn.h"
#if AR_EXPORT_VERSION < 3
#include "ntcextrn.h"
#endif

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include <stdio.h>
#include <string.h>
#include <limits.h>

#ifdef PROFILE
#include <sys/time.h>
#endif

typedef struct {
  unsigned int numItems;
  void *array;
} ARList;

typedef struct {
  ARControlStruct ctrl;
  int queries;
  long startTime;
  long endTime;
} ars_ctrl;

#define TYPEMAP_LAST 0xFFFFFFFFL

struct TypeMapStruct {
  unsigned int  number;
  char         *name;
};

static struct {
  unsigned int  number;
  char         *name;
} CharMenuRefreshCodeTypeMap[] = {
/*CHARMENUREFRESHCODETYPEMAP*/
  { TYPEMAP_LAST, "" }
};

#define PERMTYPE_SCHEMA 0
#define PERMTYPE_FIELD  1

static struct {
  unsigned int  number;
  char         *name;
} SchemaPermissionTypeMap[] = {
/*SCHEMAPERMISSIONTYPEMAP*/
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} FieldPermissionTypeMap[] = {
/*FIELDPERMISSIONTYPEMAP*/
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} DataTypeMap[] = {
/*DATATYPEMAP*/
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned long  number;
  char          *name;
} ByteListTypeMap[] = {
/*BYTELISTTYPEMAP*/
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} NoMatchOptionMap[] = {
/*NOMATCHOPTIONMAP*/
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} MultiMatchOptionMap[] = {
/*MULTIMATCHOPTIONMAP*/
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} ArithOpMap[] = {
  { AR_ARITH_OP_ADD,      "+" },
  { AR_ARITH_OP_SUBTRACT, "-" },
  { AR_ARITH_OP_MULTIPLY, "*" },
  { AR_ARITH_OP_DIVIDE,   "/" },
  { AR_ARITH_OP_MODULO,   "%" },
  { AR_ARITH_OP_NEGATE,   "-" },
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
} FunctionMap[] = {
/*FUNCTIONMAP*/
  { TYPEMAP_LAST, "" }
};

static struct {
  unsigned int  number;
  char         *name;
  int           len;
} KeyWordMap[] = {
/*KEYWORDMAP*/
  { TYPEMAP_LAST, "", 0 }
};

static struct {
  unsigned int number;
  char *name;
} ServerInfoMap[] = {
  { 0, NULL },
/*SERVERINFOMAP*/
  { TYPEMAP_LAST, NULL }
};

/* typedef SV* (*ARS_fn)(void *); */
typedef void *(*ARS_fn)( void *b);

EXTERN void        *mallocnn(int s);
EXTERN void        *debug_mallocnn(int s, char *file, char *func, int line);
EXTERN void         debug_free(void *p, char *file, char *func, int line);
EXTERN unsigned int strsrch(register char *s, register char c);
EXTERN char        *strappend(char *b, char *a);

EXTERN int          ARError_reset();
EXTERN int          ARError_add( unsigned int type, long num, char *text);
EXTERN int          ARError( int returncode, ARStatusList status);
EXTERN int          NTError( int returncode, NTStatusList status);

EXTERN SV *perl_diary(ARDiaryStruct *in);
EXTERN SV *perl_MenuRefreshCode2Str( unsigned int rc);
EXTERN SV *perl_ARPermissionList( ARPermissionList *in, int);
EXTERN SV *perl_ARStatusStruct( ARStatusStruct *);
EXTERN SV *perl_ARInternalId( ARInternalId *);
EXTERN SV *perl_ARNameType( ARNameType *);
EXTERN SV *perl_ARList( ARList *, ARS_fn, int);
EXTERN SV *perl_ARValueStruct( ARValueStruct *);
EXTERN SV *perl_ARValueStructType( ARValueStruct *in);
EXTERN SV *perl_dataType_names( unsigned int *);
EXTERN SV *perl_ARStatHistoryValue( ARStatHistoryValue *);
EXTERN SV *perl_ARAssignFieldStruct( ARAssignFieldStruct *);
EXTERN SV *perl_ARAssignStruct( ARAssignStruct *);
EXTERN SV *perl_ARFieldAssignStruct( ARFieldAssignStruct *);
EXTERN SV *perl_ARDisplayStruct( ARDisplayStruct *);
EXTERN SV *perl_ARMacroParmStruct( ARMacroParmStruct *);
EXTERN SV *perl_ARActiveLinkMacroStruct( ARActiveLinkMacroStruct *);
EXTERN SV *perl_ARFieldCharacteristics( ARFieldCharacteristics *);
EXTERN SV *perl_ARDDEStruct( ARDDEStruct *);
EXTERN SV *perl_ARActiveLinkActionStruct( ARActiveLinkActionStruct *);
EXTERN SV *perl_ARFilterActionStruct( ARFilterActionStruct *);
EXTERN SV *perl_expandARCharMenuStruct( ARControlStruct *, ARCharMenuStruct *);
EXTERN SV *perl_AREntryListFieldStruct( AREntryListFieldStruct *);
EXTERN SV *perl_ARIndexStruct( ARIndexStruct *);
EXTERN SV *perl_ARFieldLimitStruct( ARFieldLimitStruct *);
EXTERN SV *perl_ARFunctionAssignStruct( ARFunctionAssignStruct *);
EXTERN SV *perl_ARArithOpAssignStruct( ARArithOpAssignStruct *);
EXTERN void dup_Value( ARValueStruct *, ARValueStruct *);
EXTERN ARArithOpStruct *dup_ArithOp( ARArithOpStruct *);
EXTERN void dup_ValueList( ARValueList *, ARValueList *);
EXTERN ARQueryValueStruct *dup_QueryValue( ARQueryValueStruct *);
EXTERN void dup_FieldValueOrArith( ARFieldValueOrArithStruct *,
				  ARFieldValueOrArithStruct *);
EXTERN ARRelOpStruct *dup_RelOp( ARRelOpStruct *);
EXTERN ARQualifierStruct *dup_qualifier( ARQualifierStruct *);
EXTERN ARQualifierStruct *dup_qualifier2( ARQualifierStruct *in, 
					 ARQualifierStruct *out, int level);
EXTERN SV *perl_ARArithOpStruct( ARArithOpStruct *);
EXTERN SV *perl_ARQueryValueStruct( ARQueryValueStruct *);
EXTERN SV *perl_ARFieldValueOrArithStruct( ARFieldValueOrArithStruct *);
EXTERN SV *perl_relOp( ARRelOpStruct *);
EXTERN HV *perl_qualifier( ARQualifierStruct *);
EXTERN int ARGetFieldCached( ARControlStruct *, ARNameType, ARInternalId,
#if AR_EXPORT_VERSION >= 3
		     ARNameType, ARFieldMappingStruct *,
#endif
		     unsigned int *, unsigned int *,
		     unsigned int *, ARValueStruct *,
		     ARPermissionList *, ARFieldLimitStruct *,
#if AR_EXPORT_VERSION >= 3
		     ARDisplayInstanceList *,
#else
		     ARDisplayList *,
#endif
		     char **, ARTimestamp *,
		     ARNameType, ARNameType, char **,
		     ARStatusList *);
EXTERN int sv_to_ARValue( SV *in, unsigned int dataType, ARValueStruct *out);
#if AR_EXPORT_VERSION >= 3
EXTERN SV *perl_ARPropStruct( ARPropStruct *);
EXTERN SV *perl_ARDisplayInstanceStruct( ARDisplayInstanceStruct *);
EXTERN SV *perl_ARDisplayInstanceList( ARDisplayInstanceList *);
EXTERN SV *perl_ARFieldMappingStruct( ARFieldMappingStruct *);
EXTERN SV *perl_ARJoinMappingStruct( ARJoinMappingStruct *);
EXTERN SV *perl_ARViewMappingStruct( ARViewMappingStruct *);
EXTERN SV *perl_ARJoinSchema( ARJoinSchema *);
EXTERN SV *perl_ARViewSchema( ARViewSchema *);
EXTERN SV *perl_ARCompoundSchema( ARCompoundSchema *);
EXTERN SV *perl_ARSortList( ARSortList *);
EXTERN SV *perl_ARByteList( ARByteList *);
EXTERN SV *perl_ARCoordStruct( ARCoordStruct *);
EXTERN int perl_BuildEntryList( AREntryIdList *entryList, char *entry_id);
EXTERN SV *perl_ARAssignSQLStruct( ARAssignSQLStruct *in);
#endif

#ifndef BSD
# define MEMCAST void
#else
# define MEMCAST char
#endif

int  compmem(MEMCAST *m1, MEMCAST *m2, int size);
int  copymem(MEMCAST *m1, MEMCAST *m2, int size);


#ifndef ARSPERL_MALLOCDEBUG
# define MALLOCNN(X) mallocnn(X) 
#else /* we want to debug memory allocations */
# define MALLOCNN(X) debug_mallocnn(X, __FILE__, __FUNCTION__, __LINE__) 
#endif /* malloc debugging */

#ifndef ARSPERL_FREEDEBUG
# define FREE(X) free(X)
#else
# define FREE(X) debug_free(X, __FILE__, __FUNCTION__, __LINE__)
#endif /* free debugging */

#define CPNULL (char *)NULL

/* some useful macros: CharVaLiD and IntVaLiD .. 
 * for checking validity of paramters
 * VNAME() for all of those perl functions that want a string and
 * it's length as the next parameter.
 */

#define CVLD(X) (X && *X)
#define IVLD(X, L, H) ((X <= H) && (L >= X))

#define VNAME(X) X, strlen(X)

/* defines used by the ARError* functions */

#define ERRHASH  "ARS::ars_errhash"
#define EH_COUNT "numItems"
#define EH_TYPE  "messageType"
#define EH_NUM   "messageNum"
#define EH_TEXT  "messageText"

#define ARSPERL_TRACEBACK -1

#define AP_ERR_BAD_ARGS     80000, "Invalid number of arguments"
#define AP_ERR_BAD_EID      80001, "Invalid entry-id argument"
#define AP_ERR_EID_TYPE     80002, "Entry-id should be an array or a single scalar"
#define AP_ERR_EID_LEN      80003, "Invalid Entry-id length"
#define AP_ERR_BAD_LFLDS    80004, "Bad GetListFields"
#define AP_ERR_LFLDS_TYPE   80005, "GetListFields must be an ARRAY reference"
#define AP_ERR_USAGE        80006  /* roll your own text */
#define AP_ERR_MALLOC       80007, "mallocnn() failed to allocate space"
#define AP_ERR_BAD_EXP      80009, "Unknown export type"
#define AP_ERR_BAD_IMP      80010, "Unknown import type"
#define AP_ERR_DEPRECATED   80011  /* roll your own text */
#define AP_ERR_NO_SERVERS   80012, "No servers available"
#define AP_ERR_FIELD_TYPE   80013, "Unknown field type"
#define AP_ERR_COORD_LIST   80014, "Bad coord list"
#define AP_ERR_COORD_STRUCT 80015, "Bad coord struct"
#define AP_ERR_BYTE_LIST    80016, "Bad byte list"
#define AP_ERR_EID_SEP      80017, "Expected EID to contain a separator"
#define AP_ERR_OPT_NA       80018 /* roll your own text - option not available */
#define AP_ERR_EXPECT_PVHV  80019, "Expected argument to contain a HASH reference"
#define AP_ERR_GENERAL      80020 /* roll your own text */
#define AP_ERR_CONTINUE     80021 /* roll your own continuation text */
#define AP_ERR_NEEDKEYS     80022, "Required hash keys do not exists"
#define AP_ERR_NEEDKEYSKEYS 80023 /* specify what keys */
#define AP_ERR_PREREVFAIL   80024, "Failed to convert some perl structures to ars structures. Create/Set operation aborted."

#endif /* __support_h_ */
