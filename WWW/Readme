SCRIPT
	ars_web_cl.cgi
	ars_web_serv

ANCILLARY FILES
	cgi-lib.pl
		Perl Routines to Manipulate CGI input
		Copyright 1994 Steven E. Brenner
		S.E.Brenner@bioc.cam.ac.uk

OVERVIEW

This directory contains "ars_web.cgi", a Web client for Remedy's ARS system.
The client is mainly here for offering some illustration of how to use 
arsperl (as example code is fairly sparse at the moment). 

The client is fairly full-featured, but a few things should be noted about
it:

     (1) Multi-tiered menu's (hierarchical menus) have been represented
         as a single pick-list window. While not perfect, limitations in
         HTML make it difficult to display these types of menus in other
         fashions.

     (2) Active links are still being worked on, and are not fully 
         operational. If they don't work for you, don't be suprised. 

INSTALLATION

Be sure to first build and install ARSPerl itself. This script will not
function without it. 

1) Copy the files ars_web_cl.cgi, ars_web_serv, and cgi-lib.pl to a
   directory that is accessible by your web server.  You may want to put
   ars_web_serv elsewhere, and change $SESS_SERVER in ars_web_cl.cgi.  Be
   sure that CGI scripts are enabled for your server or the scripts are in a
   directory that allows script executing (refer to your server specific 
   documentation on enabling them). 

2) Set the path to perl in the ars_web.cgi file (very first line) 
   to the location where the "perl" executable is on your system. 

3) Set the $ARS_SERVER name to the hostname of your ARS server (line #7 in
   the ars_web.cgi script. (optional)

4) If you want active links enabled, then set $ACTIVE_LINKS="on".
   They are currently only partially working.

5) Using a web browser open the appropriate URL that specifies the location
   of ars_web_cl.cgi on your web server. 

You can then enter your ARS username and password to log onto the server.

HOW IT WORKS

The older web client, ars_web_old.cgi, would store your username and 
password as hidden fields in the web form to work around the fact that
web forms are stateless.  I have reworked it to spawn off sessions,
or servers for each person logged in.  Sessions timeout after ten
minutes.  Web pages now store a (sort of) random key to authenticate
session sessions.  The remote hostname is also checked for consistancy.

DISCLAIMER

This software is offered without any warranty. Use at your own risk.
This software should be considered to be an Alpha Release at present:
while some features are functional, many are not.

AUTHOR

Joel Murphy 
jmurphy@acsu.buffalo.edu

BUGS TO

arsperl@smurfland.cit.buffalo.edu
